{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b65e390",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7509158",
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "class DataGenerator() :\n",
    "\n",
    "    def __init__(self , batch_size , tag  ) :\n",
    "        \n",
    "        self._batch_size = batch_size\n",
    "        self._tag = tag \n",
    "        self._f_table_labels = ['tshirt' , 'trouser' , 'pullover' , 'dress' , 'coat',\n",
    "            'sandal' , 'shirt' , 'sneaker' , 'bag' , 'ankle boot']\n",
    "        self._d_table_labels = ['0' , '1' , '2' , '3' , '4',\n",
    "            '5' , '6' , '7' , '8' , '9']\n",
    "        self.FASION = 1\n",
    "        self.DIGIT = 0 \n",
    "        \n",
    "        \n",
    "    #********************************************************************\n",
    "    #\n",
    "    # download fasion dataset by MNIST and transfroming it  \n",
    "    #\n",
    "    #\n",
    "\n",
    "    def _loading_fasion_mnist_2(self, resize = None ) :\n",
    "\n",
    "        trans = [torchvision.transforms.ToTensor()]\n",
    "        if resize :\n",
    "            trans.insert( 0 , torchvision.transforms.Resize(resize))\n",
    "        trans = torchvision.transforms.Compose(trans) \n",
    "        \n",
    "        mnist_train = torchvision.datasets.FashionMNIST(\n",
    "            root=\"../data2\" , train=True , transform=trans , download=True)\n",
    "        mnist_test = torchvision.datasets.FashionMNIST(\n",
    "            root=\"../data2\" , train=False , transform=trans , download=True)\n",
    "        return (data.DataLoader(mnist_train , self._batch_size , shuffle=True , \n",
    "            num_workers=self._get_dataloader_workers()) , \n",
    "                data.DataLoader(mnist_test , self._batch_size , shuffle = False ,\n",
    "                    num_workers=self._get_dataloader_workers()))\n",
    "\n",
    "\n",
    "    #********************************************************************\n",
    "    #\n",
    "    # download hand writing digit dataset by MNIST and transfroming it  \n",
    "    #\n",
    "    #\n",
    "    def _loading_digit_data_set(self) :\n",
    "        l1 = 0.1307\n",
    "        l2 = 0.3071\n",
    "        mnist_train =torchvision.datasets.MNIST('./data' , train=True , download=False , \n",
    "            transform=torchvision.transforms.Compose([\n",
    "                torchvision.transforms.ToTensor(),\n",
    "                    torchvision.transforms.Normalize((l1,),(l2,)) \n",
    "        ]))\n",
    "        mnist_test = torchvision.datasets.MNIST(root=\"./data\" , train=False , download=False , \\\n",
    "            transform=torchvision.transforms.Compose([\n",
    "                torchvision.transforms.ToTensor()]))\n",
    "        return (torch.utils.data.DataLoader(mnist_train , self._batch_size , shuffle=True ,\\\n",
    "                                num_workers=self._get_dataloader_workers()) ,\\\n",
    "                torch.utils.data.DataLoader(mnist_test , self._batch_size , shuffle=False ,\\\n",
    "                                num_workers=self._get_dataloader_workers()))\n",
    "    \n",
    "    def _get_dataloader_workers(self) : \n",
    "        return 4 \n",
    "\n",
    "    \n",
    "    def loadingData(self) :\n",
    "        if self._tag == self.FASION :\n",
    "            return _loading_fasion_mnist_2()\n",
    "        elif self._tag == self.DIGIT :\n",
    "            return _loading_digit_data_set()\n",
    "    \n",
    "    \n",
    "    def getLabel(self , labels) :\n",
    "        if self._tag == self.FASION :\n",
    "            return [ f_table_labels[int(i)] for i in labels]\n",
    "        if self._tag == self.DIGIT :\n",
    "            return [ d_table_labels[int(i)] for i in labels]\n",
    "\n",
    "        \n",
    "    def show_images(self, imgs , num_rows , num_cols , titles=None , scale=1.5) :\n",
    "        \"\"\" show dataset mnist pic\"\"\"\n",
    "        figsize = (num_cols * scale , num_rows * scale ) \n",
    "        _ , axes = d2l.plt.subplots(num_rows , num_cols , figsize=figsize)\n",
    "        axes = axes.flatten()\n",
    "        for i , (ax , img) in enumerate(zip(axes , imgs)) :\n",
    "            if torch.is_tensor(img) :\n",
    "                ax.imshow(img.numpy())\n",
    "            else :            \n",
    "                ax.imshow(img)\n",
    "            ax.axes.get_xaxis().set_visible(False)\n",
    "            ax.axes.get_yaxis().set_visible(False)\n",
    "            if titles : \n",
    "                ax.set_title(titles[i])\n",
    "        d2l.plt.show() #encapsulate show func\n",
    "        return axes \n",
    "\n",
    "\n",
    "            \n",
    "\n",
    "            \n",
    "class Accumulator :\n",
    "    \n",
    "    def __init__(self , n) :\n",
    "        self.data = [0.0] * n \n",
    "\n",
    "    def add(self , *args) :\n",
    "        self.data = [ a + float(b) for a , b in zip(self.data , args)]\n",
    "    \n",
    "    def reset(self) :\n",
    "        self.data = [0.0] * len(self.data)\n",
    "\n",
    "    def __getitem__(self , indx) :\n",
    "        return self.data[indx]\n",
    "\n",
    "\n",
    "\n",
    "class Animator: \n",
    "    \n",
    "    def __init__(self, xlabel=None, ylabel=None, legend=None, xlim=None,\n",
    "        ylim=None, xscale='linear', yscale='linear',\n",
    "            fmts=('r-', 'b--', 'g-.', 'r:'), nrows=1, ncols=1,\n",
    "                figsize=(3.5, 2.5)):\n",
    "        # 增量地绘制多条线\n",
    "        if legend is None:\n",
    "            legend = []\n",
    "        d2l.use_svg_display() #use svg pictrue format display \n",
    "        self.fig, self.axes = d2l.plt.subplots(nrows, ncols, figsize=figsize)\n",
    "        if nrows * ncols == 1:\n",
    "            self.axes = [self.axes, ]\n",
    "            # 使用lambda函数捕获参数\n",
    "        self.config_axes = lambda: d2l.set_axes(\n",
    "            self.axes[0], xlabel, ylabel, xlim, ylim, xscale, yscale, legend)\n",
    "        self.X, self.Y, self.fmts = None, None, fmts\n",
    "\n",
    "        \n",
    "    def add(self , x , y) :\n",
    "        if not hasattr( y , \"__len__\") :\n",
    "            y = [y]\n",
    "        n = len(y)\n",
    "        if not hasattr(x , \"__len__\") :\n",
    "            x = [x] * n \n",
    "        if not self.X :\n",
    "            self.X = [ [] for _ in range(n)]\n",
    "        if not self.Y :\n",
    "            self.Y = [[] for _ in range(n)]\n",
    "        for i, (a, b) in enumerate(zip(x, y)):\n",
    "            if a is not None and b is not None:\n",
    "                self.X[i].append(a)\n",
    "                self.Y[i].append(b)\n",
    "        self.axes[0].cla()\n",
    "        for x, y, fmt in zip(self.X, self.Y, self.fmts):\n",
    "            self.axes[0].plot(x, y, fmt)\n",
    "        self.config_axes()\n",
    "        display.display(self.fig)\n",
    "        display.clear_output(wait=True)\n",
    "\n",
    "        \n",
    "class Train() :\n",
    "    \n",
    "    def __init__(self , net, train_iter, test_iter, loss, num_epochs, updater ) :\n",
    "        self.net = net \n",
    "        self.train_iter = train_iter \n",
    "        self.test_iter = test_iter \n",
    "        self.loss = loss \n",
    "        self.num_epochs = num_epochs\n",
    "        self.updater = updater\n",
    "        \n",
    "        self.metric = None\n",
    "        self.animator = Animator(xlabel='epoch', xlim=[1, num_epochs], ylim=[0.3, 0.9],\n",
    "            legend=['train loss', 'train acc', 'test acc'])\n",
    "\n",
    "    def _train_epoch(self) :\n",
    "        #just adjust model to tain , not means directly train\n",
    "        if isinstance(self.net , torch.nn.Module) :\n",
    "            self.net.train()\n",
    "        # trains loss degree sum , trains accurary degree sum , sample number  \n",
    "        self.metric = Accumulator(3)\n",
    "        for X , y in self.train_iter : \n",
    "            y_hat = self.net(X)\n",
    "            #print(y_hat)\n",
    "            l = self.loss(y_hat , y)\n",
    "            #print(l)\n",
    "            # use inner define \n",
    "            if isinstance(updater , torch.optim.Optimizer) : \n",
    "                self.updater.zero_grad()\n",
    "                l.mean().backward()\n",
    "                self.updater.step()\n",
    "            # use external define \n",
    "            else :\n",
    "                l.sum().backward()\n",
    "                self.updater(X.shape[0])\n",
    "            self.metric.add( float(l.sum()) , accuracy(y_hat , y) , y.numel())\n",
    "        return self.metric[0]/self.metric[2] , self.metric[1]/metric[2]\n",
    "\n",
    "    def _accuracy(self, y_hat , y) :\n",
    "        if len(y_hat.shape) > 1 and y_hat.shape[1] > 1 :\n",
    "            y_hat = y_hat.argmax(axis=1) # return index of argmax with axis = 1 \n",
    "        cmp = y_hat.type(y.dtype) == y \n",
    "        return float(cmp.type(y.dtype).sum())\n",
    "\n",
    "    def _evaluate_accuracy(self) :\n",
    "        if isinstance(net , torch.nn.Module) :\n",
    "            self.net.eval() # just evaluate not train\n",
    "        self.metric = Accumulator(2) \n",
    "        with torch.no_grad() :\n",
    "            for X , y in self.test_iter :\n",
    "                self.metric.add(self._accuracy(net(X) , y) , y.numel())\n",
    "        return metric[0] / metric[1]\n",
    "\n",
    "\n",
    "    def start(self): \n",
    "\n",
    "        for epoch in range(self.num_epochs):\n",
    "            print(\"train epoch : \"+str(epoch))\n",
    "            train_metrics = self._train_epoch()\n",
    "            test_acc = self._evaluate_accuracy(net , test_iter)\n",
    "            self.animator.add(epoch + 1 , train_metrics + (test_acc,))\n",
    "        train_loss, train_acc = train_metrics\n",
    "        assert train_loss < 0.5, train_loss\n",
    "        assert train_acc <= 1 and train_acc > 0.7, train_acc\n",
    "        assert test_acc <= 1 and test_acc > 0.7, test_acc\n",
    "\n",
    "           \n",
    "            \n",
    "        \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
